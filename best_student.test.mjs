import { findBestStudent } from "./best_student.";
import { studentsData } from "./students_data.";

// describe("Тестирование квадратного уравнения", () => {
//     it.each([
//       [1, -3, -4, [4, -1]],
//       [9, 6, 1, -27],
//       [9, 6, 2, "корней нет"],
//     ])("Переменные значения %p %p %p полученные корни %p", (a, b, c, result) => {
//       expect(square(a, b, c)).toEqual(result);
//     });
//   });

describe("Тестирование функции по поиску лучшего студента", () => {
  it.each([
    [
      studentsData[0],
      [
        "Поздравляем вас, Ivan, вы набрали наибольшее количество баллов: 35.",
        "Поздравляем вас, Stepan, вы набрали наибольшее количество баллов: 35.",
        undefined,
      ],
    ],
    [
      studentsData[1],
      [
        "Поздравляем вас, Natalia, вы набрали наибольшее количество баллов: 25.",
        "Поздравляем вас, Marina, вы набрали наибольшее количество баллов: 25.",
        "Поздравляем вас, Dmitry, вы набрали наибольшее количество баллов: 25.",
        undefined,
      ],
    ],
    [studentsData[2], ["В группе никто не отличился.", undefined]],
  ])("В группе студентов %p следующие результаты %p", (a, result) => {
    expect(findBestStudent(a)).toEqual(result);
  });
});

// Параметризованные тесты литеральный синтаксис
//   describe ("Тестирование квадратного уравнения литеральный синтаксис", () => {
//       it.each
//       `
//       a       |b       |c      |result
//       ${1}    |${-3}   |${-4}  |${[4, -1]}
//       ${9}    |${6}    |${1}   |${-27}
//       ${9}    |${6}    |${2}   |${"корней нет"}
//       `
//       (`Передаем значения $a, $b, $c, результаты представлены $result`,
//       ({a, b, c, result}) => {
//           expect(square(a,b,c)).toEqual(result);
//       });
//   });
